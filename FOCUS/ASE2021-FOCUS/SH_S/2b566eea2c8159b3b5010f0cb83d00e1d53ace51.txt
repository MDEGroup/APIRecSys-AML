app/controllers/NewAnnController/main(org.springframework.ui.ModelMap)#java/util/ArrayList/ArrayList()
app/controllers/NewAnnController/main(org.springframework.ui.ModelMap)#org/springframework/ui/ModelMap/addAttribute(java.lang.String,java.lang.Object)
app/controllers/NewAnnController/main(org.springframework.ui.ModelMap)#java/util/List/size()
app/controllers/NewAnnController/main(org.springframework.ui.ModelMap)#org/springframework/ui/ModelMap/addAllAttributes(java.util.Map)
app/controllers/NewAnnController/main(org.springframework.ui.ModelMap)#java/util/HashMap/HashMap()
app/controllers/NewAnnController/main(org.springframework.ui.ModelMap)#app/db/DatabaseDAO/getAllCategories()
app/controllers/NewAnnController/createAnn(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)#app/db/models/Announcement/Announcement(java.lang.String,int,java.sql.Timestamp,boolean,app.db.models.Contact,app.db.models.Category)
app/controllers/NewAnnController/createAnn(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)#org/apache/commons/lang3/StringUtils/isBlank(java.lang.CharSequence)
app/controllers/NewAnnController/createAnn(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)#app/db/DatabaseDAO/getContactByPhone(java.lang.String)
app/controllers/NewAnnController/createAnn(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)#app/db/models/Contact/Contact(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
app/controllers/NewAnnController/createAnn(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)#java/util/List/size()
app/controllers/NewAnnController/createAnn(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)#app/db/DatabaseDAO/addContact(app.db.models.Contact)
app/controllers/NewAnnController/createAnn(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)#java/sql/Timestamp/Timestamp(long)
app/controllers/NewAnnController/createAnn(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)#java/lang/Integer/parseInt(java.lang.String)
app/controllers/NewAnnController/createAnn(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)#java/util/List/add(E)
app/controllers/NewAnnController/createAnn(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)#java/util/Map/put(K,V)
app/controllers/NewAnnController/createAnn(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)#java/util/Date/getTime()
app/controllers/NewAnnController/createAnn(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)#java/lang/NumberFormatException/NumberFormatException()
app/controllers/NewAnnController/createAnn(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)#app/db/DatabaseDAO/getCategoryById(int)
app/controllers/NewAnnController/createAnn(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)#java/lang/String/equals(java.lang.Object)
app/controllers/NewAnnController/createAnn(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)#java/util/Date/Date()
app/controllers/NewAnnController/createAnn(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)#org/apache/commons/lang3/StringUtils/isNotBlank(java.lang.CharSequence)
app/controllers/NewAnnController/createAnn(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)#app/db/DatabaseDAO/addAnnouncement(app.db.models.Announcement)
app/controllers/NewAnnController/createAnn(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)#app/util/HtmlSpecialChars/replaceChars(java.lang.String)
app/controllers/AboutController/main(org.springframework.ui.ModelMap)#org/springframework/ui/ModelMap/addAttribute(java.lang.String,java.lang.Object)
app/controllers/AboutController/main(org.springframework.ui.ModelMap)#app/db/DatabaseDAO/getAllCategories()
app/db/models/Announcement/hashCode()#java/lang/String/hashCode()
app/db/models/Announcement/hashCode()#java/lang/Double/doubleToLongBits(double)
app/db/models/Announcement/hashCode()#java/sql/Timestamp/hashCode()
app/db/models/Announcement/equals(java.lang.Object)#java/lang/Double/compare(double,double)
app/db/models/Announcement/equals(java.lang.Object)#java/lang/String/equals(java.lang.Object)
app/db/models/Announcement/equals(java.lang.Object)#java/sql/Timestamp/equals(java.sql.Timestamp)
app/db/models/Announcement/equals(java.lang.Object)#java/lang/Object/getClass()
app/controllers/DeleteController/deleteChecks(java.lang.String[])#app/db/DatabaseDAO/deleteAnnouncements(long[])
app/controllers/DeleteController/deleteChecks(java.lang.String[])#java/lang/Long/parseLong(java.lang.String)
app/controllers/DeleteController/deleteById(java.lang.String)#java/lang/Long/parseLong(java.lang.String)
app/controllers/DeleteController/deleteById(java.lang.String)#app/db/DatabaseDAO/deleteAnnouncement(long)
app/util/currency/CurrencyWorker/getJSON()#java/lang/String/String(char[],int,int)
app/util/currency/CurrencyWorker/getJSON()#java/io/BufferedReader/read(char[],int,int)
app/util/currency/CurrencyWorker/getJSON()#java/lang/StringBuilder/append(java.lang.String)
app/util/currency/CurrencyWorker/getJSON()#java/net/URL/URL(java.lang.String)
app/util/currency/CurrencyWorker/getJSON()#java/net/URLConnection/getInputStream()
app/util/currency/CurrencyWorker/getJSON()#java/io/BufferedReader/BufferedReader(java.io.Reader)
app/util/currency/CurrencyWorker/getJSON()#java/lang/StringBuilder/toString()
app/util/currency/CurrencyWorker/getJSON()#java/io/BufferedReader/close()
app/util/currency/CurrencyWorker/getJSON()#java/net/HttpURLConnection/disconnect()
app/util/currency/CurrencyWorker/getJSON()#java/lang/Throwable/printStackTrace()
app/util/currency/CurrencyWorker/getJSON()#java/net/URL/openConnection()
app/util/currency/CurrencyWorker/getJSON()#java/lang/StringBuilder/StringBuilder()
app/util/currency/CurrencyWorker/getJSON()#java/io/InputStreamReader/InputStreamReader(java.io.InputStream)
app/util/currency/CurrencyWorker/getCurrency(java.lang.String)#com/google/gson/GsonBuilder/create()
app/util/currency/CurrencyWorker/getCurrency(java.lang.String)#java/lang/String/equals(java.lang.Object)
app/util/currency/CurrencyWorker/getCurrency(java.lang.String)#app/util/currency/JSON/getQuery()
app/util/currency/CurrencyWorker/getCurrency(java.lang.String)#app/util/currency/CurrencyWorker/getJSON()
app/util/currency/CurrencyWorker/getCurrency(java.lang.String)#com/google/gson/GsonBuilder/GsonBuilder()
app/util/currency/CurrencyWorker/getCurrency(java.lang.String)#com/google/gson/Gson/fromJson(java.lang.String,java.lang.Class)
app/util/currency/CurrencyWorker/getCurrency(java.lang.String)#app/util/currency/Results/getRate()
app/util/currency/CurrencyWorker/getCurrency(java.lang.String)#app/util/currency/Rate/getId()
app/util/currency/CurrencyWorker/getCurrency(java.lang.String)#app/util/currency/Query/getResults()
app/util/currency/CurrencyWorker/getCurrency(java.lang.String)#app/util/currency/Rate/getRate()
app/util/HtmlSpecialChars/replaceChars(java.lang.String)#java/lang/String/length()
app/util/HtmlSpecialChars/replaceChars(java.lang.String)#java/lang/StringBuilder/StringBuilder()
app/util/HtmlSpecialChars/replaceChars(java.lang.String)#java/lang/StringBuilder/append(char)
app/util/HtmlSpecialChars/replaceChars(java.lang.String)#java/lang/StringBuilder/toString()
app/util/HtmlSpecialChars/replaceChars(java.lang.String)#java/lang/StringBuilder/append(java.lang.String)
app/util/HtmlSpecialChars/replaceChars(java.lang.String)#java/lang/String/charAt(int)
app/controllers/CurrencyController/main(java.lang.String,javax.servlet.http.HttpServletRequest)#javax/servlet/http/HttpServletRequest/getHeader(java.lang.String)
app/controllers/CurrencyController/main(java.lang.String,javax.servlet.http.HttpServletRequest)#java/lang/String/toLowerCase()
app/controllers/CurrencyController/main(java.lang.String,javax.servlet.http.HttpServletRequest)#javax/servlet/http/HttpSession/setAttribute(java.lang.String,java.lang.Object)
app/controllers/CurrencyController/main(java.lang.String,javax.servlet.http.HttpServletRequest)#org/apache/commons/lang3/StringUtils/isNotBlank(java.lang.CharSequence)
app/controllers/CurrencyController/main(java.lang.String,javax.servlet.http.HttpServletRequest)#javax/servlet/http/HttpServletRequest/getSession()
app/controllers/CurrencyController/main(java.lang.String,javax.servlet.http.HttpServletRequest)#app/util/currency/CurrencyWorker/getCurrency(java.lang.String)
app/db/DatabaseDAOImpl/getAllAnnouncements()#javax/persistence/TypedQuery/getResultList()
app/db/DatabaseDAOImpl/getAllAnnouncements()#javax/persistence/EntityManager/createNamedQuery(java.lang.String,java.lang.Class)
app/db/DatabaseDAOImpl/getAllAnnouncements()#app/db/DatabaseDAOImpl/getEm()
app/db/DatabaseDAOImpl/searchAnnouncement(java.lang.String)#javax/persistence/TypedQuery/setParameter(java.lang.String,java.lang.Object)
app/db/DatabaseDAOImpl/searchAnnouncement(java.lang.String)#javax/persistence/TypedQuery/getResultList()
app/db/DatabaseDAOImpl/searchAnnouncement(java.lang.String)#javax/persistence/EntityManager/createNamedQuery(java.lang.String,java.lang.Class)
app/db/DatabaseDAOImpl/searchAnnouncement(java.lang.String)#app/db/DatabaseDAOImpl/getEm()
app/db/DatabaseDAOImpl/deleteAnnouncements(long[])#java/lang/Throwable/printStackTrace()
app/db/DatabaseDAOImpl/deleteAnnouncements(long[])#javax/persistence/EntityManager/find(java.lang.Class,java.lang.Object)
app/db/DatabaseDAOImpl/deleteAnnouncements(long[])#javax/persistence/EntityTransaction/begin()
app/db/DatabaseDAOImpl/deleteAnnouncements(long[])#javax/persistence/EntityTransaction/commit()
app/db/DatabaseDAOImpl/deleteAnnouncements(long[])#javax/persistence/EntityManager/getTransaction()
app/db/DatabaseDAOImpl/deleteAnnouncements(long[])#javax/persistence/EntityManager/remove(java.lang.Object)
app/db/DatabaseDAOImpl/deleteAnnouncements(long[])#javax/persistence/EntityTransaction/rollback()
app/db/DatabaseDAOImpl/deleteAnnouncements(long[])#app/db/DatabaseDAOImpl/getEm()
app/db/DatabaseDAOImpl/getContactByPhone(java.lang.String)#javax/persistence/TypedQuery/setParameter(java.lang.String,java.lang.Object)
app/db/DatabaseDAOImpl/getContactByPhone(java.lang.String)#javax/persistence/TypedQuery/getResultList()
app/db/DatabaseDAOImpl/getContactByPhone(java.lang.String)#java/util/List/isEmpty()
app/db/DatabaseDAOImpl/getContactByPhone(java.lang.String)#javax/persistence/EntityManager/createNamedQuery(java.lang.String,java.lang.Class)
app/db/DatabaseDAOImpl/getContactByPhone(java.lang.String)#java/util/List/get(int)
app/db/DatabaseDAOImpl/getContactByPhone(java.lang.String)#app/db/DatabaseDAOImpl/getEm()
app/db/DatabaseDAOImpl/getTopAnnouncements()#javax/persistence/TypedQuery/getResultList()
app/db/DatabaseDAOImpl/getTopAnnouncements()#javax/persistence/EntityManager/createNamedQuery(java.lang.String,java.lang.Class)
app/db/DatabaseDAOImpl/getTopAnnouncements()#app/db/DatabaseDAOImpl/getEm()
app/db/DatabaseDAOImpl/deleteAnnouncement(long)#java/lang/Throwable/printStackTrace()
app/db/DatabaseDAOImpl/deleteAnnouncement(long)#javax/persistence/EntityManager/find(java.lang.Class,java.lang.Object)
app/db/DatabaseDAOImpl/deleteAnnouncement(long)#javax/persistence/EntityTransaction/begin()
app/db/DatabaseDAOImpl/deleteAnnouncement(long)#javax/persistence/EntityTransaction/commit()
app/db/DatabaseDAOImpl/deleteAnnouncement(long)#javax/persistence/EntityManager/getTransaction()
app/db/DatabaseDAOImpl/deleteAnnouncement(long)#javax/persistence/EntityManager/remove(java.lang.Object)
app/db/DatabaseDAOImpl/deleteAnnouncement(long)#javax/persistence/EntityTransaction/rollback()
app/db/DatabaseDAOImpl/deleteAnnouncement(long)#app/db/DatabaseDAOImpl/getEm()
app/db/DatabaseDAOImpl/addContact(app.db.models.Contact)#javax/persistence/EntityTransaction/begin()
app/db/DatabaseDAOImpl/addContact(app.db.models.Contact)#javax/persistence/EntityTransaction/commit()
app/db/DatabaseDAOImpl/addContact(app.db.models.Contact)#javax/persistence/EntityManager/persist(java.lang.Object)
app/db/DatabaseDAOImpl/addContact(app.db.models.Contact)#javax/persistence/EntityManager/getTransaction()
app/db/DatabaseDAOImpl/addContact(app.db.models.Contact)#javax/persistence/EntityTransaction/rollback()
app/db/DatabaseDAOImpl/addContact(app.db.models.Contact)#app/db/DatabaseDAOImpl/getEm()
app/db/DatabaseDAOImpl/getCategoryById(int)#javax/persistence/TypedQuery/setParameter(java.lang.String,java.lang.Object)
app/db/DatabaseDAOImpl/getCategoryById(int)#javax/persistence/TypedQuery/getResultList()
app/db/DatabaseDAOImpl/getCategoryById(int)#java/util/List/isEmpty()
app/db/DatabaseDAOImpl/getCategoryById(int)#javax/persistence/EntityManager/createNamedQuery(java.lang.String,java.lang.Class)
app/db/DatabaseDAOImpl/getCategoryById(int)#java/util/List/get(int)
app/db/DatabaseDAOImpl/getCategoryById(int)#app/db/DatabaseDAOImpl/getEm()
app/db/DatabaseDAOImpl/finalize()#javax/persistence/EntityManager/close()
app/db/DatabaseDAOImpl/finalize()#java/lang/Object/finalize()
app/db/DatabaseDAOImpl/getAnnouncementsByCategoryId(int)#javax/persistence/TypedQuery/setParameter(java.lang.String,java.lang.Object)
app/db/DatabaseDAOImpl/getAnnouncementsByCategoryId(int)#javax/persistence/TypedQuery/getResultList()
app/db/DatabaseDAOImpl/getAnnouncementsByCategoryId(int)#javax/persistence/EntityManager/createNamedQuery(java.lang.String,java.lang.Class)
app/db/DatabaseDAOImpl/getAnnouncementsByCategoryId(int)#app/db/DatabaseDAOImpl/getEm()
app/db/DatabaseDAOImpl/getEm()#javax/persistence/EntityManagerFactory/createEntityManager()
app/db/DatabaseDAOImpl/getEm()#javax/persistence/Persistence/createEntityManagerFactory(java.lang.String)
app/db/DatabaseDAOImpl/getAllCategories()#javax/persistence/TypedQuery/getResultList()
app/db/DatabaseDAOImpl/getAllCategories()#javax/persistence/EntityManager/createNamedQuery(java.lang.String,java.lang.Class)
app/db/DatabaseDAOImpl/getAllCategories()#app/db/DatabaseDAOImpl/getEm()
app/db/DatabaseDAOImpl/addAnnouncement(app.db.models.Announcement)#java/lang/Throwable/printStackTrace()
app/db/DatabaseDAOImpl/addAnnouncement(app.db.models.Announcement)#javax/persistence/EntityTransaction/begin()
app/db/DatabaseDAOImpl/addAnnouncement(app.db.models.Announcement)#javax/persistence/EntityTransaction/commit()
app/db/DatabaseDAOImpl/addAnnouncement(app.db.models.Announcement)#javax/persistence/EntityManager/persist(java.lang.Object)
app/db/DatabaseDAOImpl/addAnnouncement(app.db.models.Announcement)#javax/persistence/EntityManager/getTransaction()
app/db/DatabaseDAOImpl/addAnnouncement(app.db.models.Announcement)#javax/persistence/EntityTransaction/rollback()
app/db/DatabaseDAOImpl/addAnnouncement(app.db.models.Announcement)#app/db/DatabaseDAOImpl/getEm()
app/controllers/IndexController/main(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.ModelMap)#app/db/DatabaseDAO/getAllAnnouncements()
app/controllers/IndexController/main(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.ModelMap)#java/util/ArrayList/ArrayList()
app/controllers/IndexController/main(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.ModelMap)#app/util/Pagination/getItemsPerPage(java.util.List,int)
app/controllers/IndexController/main(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.ModelMap)#java/lang/StringBuilder/append(java.lang.String)
app/controllers/IndexController/main(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.ModelMap)#app/util/Pagination/getPagesNumber(java.util.List)
app/controllers/IndexController/main(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.ModelMap)#java/lang/StringBuilder/append(int)
app/controllers/IndexController/main(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.ModelMap)#org/springframework/ui/ModelMap/addAttribute(java.lang.String,java.lang.Object)
app/controllers/IndexController/main(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.ModelMap)#app/db/models/Announcement/setTimeString(java.lang.String)
app/controllers/IndexController/main(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.ModelMap)#java/util/Collections/sort(java.util.List,java.util.Comparator)
app/controllers/IndexController/main(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.ModelMap)#org/apache/commons/lang3/StringUtils/isNotBlank(java.lang.CharSequence)
app/controllers/IndexController/main(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.ModelMap)#java/lang/Integer/parseInt(java.lang.String)
app/controllers/IndexController/main(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.ModelMap)#java/text/SimpleDateFormat/SimpleDateFormat(java.lang.String)
app/controllers/IndexController/main(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.ModelMap)#java/util/List/size()
app/controllers/IndexController/main(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.ModelMap)#java/lang/AbstractStringBuilder/setLength(int)
app/controllers/IndexController/main(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.ModelMap)#java/util/List/add(E)
app/controllers/IndexController/main(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.ModelMap)#app/db/models/Announcement/getTime()
app/controllers/IndexController/main(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.ModelMap)#app/db/DatabaseDAO/getAnnouncementsByCategoryId(int)
app/controllers/IndexController/main(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.ModelMap)#java/text/DateFormat/format(java.util.Date)
app/controllers/IndexController/main(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.ModelMap)#app/db/DatabaseDAO/getAllCategories()
app/controllers/IndexController/main(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.ModelMap)#java/lang/NumberFormatException/NumberFormatException()
app/controllers/IndexController/main(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.ModelMap)#java/lang/StringBuilder/toString()
app/controllers/IndexController/main(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.ModelMap)#app/db/models/Announcement/isTop()
app/controllers/SearchController/main(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.ModelMap)#app/db/DatabaseDAO/searchAnnouncement(java.lang.String)
app/controllers/SearchController/main(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.ModelMap)#app/util/Pagination/getItemsPerPage(java.util.List,int)
app/controllers/SearchController/main(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.ModelMap)#java/lang/StringBuilder/append(java.lang.String)
app/controllers/SearchController/main(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.ModelMap)#app/util/Pagination/getPagesNumber(java.util.List)
app/controllers/SearchController/main(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.ModelMap)#java/lang/StringBuilder/append(int)
app/controllers/SearchController/main(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.ModelMap)#org/springframework/ui/ModelMap/addAttribute(java.lang.String,java.lang.Object)
app/controllers/SearchController/main(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.ModelMap)#app/db/models/Announcement/setTimeString(java.lang.String)
app/controllers/SearchController/main(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.ModelMap)#java/util/Collections/sort(java.util.List,java.util.Comparator)
app/controllers/SearchController/main(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.ModelMap)#org/apache/commons/lang3/StringUtils/isNotBlank(java.lang.CharSequence)
app/controllers/SearchController/main(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.ModelMap)#java/lang/Integer/parseInt(java.lang.String)
app/controllers/SearchController/main(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.ModelMap)#app/db/models/Announcement/getTime()
app/controllers/SearchController/main(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.ModelMap)#java/text/SimpleDateFormat/SimpleDateFormat(java.lang.String)
app/controllers/SearchController/main(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.ModelMap)#java/util/List/size()
app/controllers/SearchController/main(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.ModelMap)#java/lang/AbstractStringBuilder/setLength(int)
app/controllers/SearchController/main(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.ModelMap)#app/db/DatabaseDAO/getAnnouncementsByCategoryId(int)
app/controllers/SearchController/main(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.ModelMap)#java/text/DateFormat/format(java.util.Date)
app/controllers/SearchController/main(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.ModelMap)#app/db/DatabaseDAO/getAllCategories()
app/controllers/SearchController/main(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.ModelMap)#java/lang/NumberFormatException/NumberFormatException()
app/controllers/SearchController/main(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.ModelMap)#java/lang/StringBuilder/toString()
app/controllers/SearchController/main(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.ModelMap)#app/util/HtmlSpecialChars/replaceChars(java.lang.String)
app/util/Pagination/getItemsPerPage(java.util.List,int)#java/util/ArrayList/ArrayList()
app/util/Pagination/getItemsPerPage(java.util.List,int)#java/util/List/size()
app/util/Pagination/getItemsPerPage(java.util.List,int)#java/util/List/add(E)
app/util/Pagination/getItemsPerPage(java.util.List,int)#java/util/List/get(int)
app/util/Pagination/getPagesNumber(java.util.List)#java/util/List/size()
app/util/Pagination/setNumberOfItemsPerPageStr(java.lang.String)#java/lang/Integer/parseInt(java.lang.String)
app/util/Pagination/setNumberOfItemsPerPageStr(java.lang.String)#java/lang/NumberFormatException/NumberFormatException()
app/util/mvc_interceptors/PageInterceptor/preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)#javax/servlet/http/HttpSession/getAttribute(java.lang.String)
app/util/mvc_interceptors/PageInterceptor/preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)#app/db/DatabaseDAO/getTopAnnouncements()
app/util/mvc_interceptors/PageInterceptor/preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)#java/util/List/subList(int,int)
app/util/mvc_interceptors/PageInterceptor/preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)#java/util/List/size()
app/util/mvc_interceptors/PageInterceptor/preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)#app/db/models/Announcement/setTimeString(java.lang.String)
app/util/mvc_interceptors/PageInterceptor/preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)#app/util/mvc_interceptors/PageInterceptor/initCurrency()
app/util/mvc_interceptors/PageInterceptor/preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)#org/apache/commons/lang3/StringUtils/isNotBlank(java.lang.CharSequence)
app/util/mvc_interceptors/PageInterceptor/preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)#javax/servlet/http/HttpServletRequest/getSession()
app/util/mvc_interceptors/PageInterceptor/preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)#javax/servlet/ServletRequest/setAttribute(java.lang.String,java.lang.Object)
app/util/mvc_interceptors/PageInterceptor/preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)#java/lang/Integer/parseInt(java.lang.String)
app/util/mvc_interceptors/PageInterceptor/preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)#app/db/models/Announcement/getTime()
app/util/mvc_interceptors/PageInterceptor/preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)#java/text/DateFormat/format(java.util.Date)
app/util/mvc_interceptors/PageInterceptor/preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)#java/util/Collections/shuffle(java.util.List)
app/util/mvc_interceptors/PageInterceptor/preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)#java/lang/NumberFormatException/NumberFormatException()
app/util/mvc_interceptors/PageInterceptor/preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)#java/text/SimpleDateFormat/SimpleDateFormat(java.lang.String)
app/util/mvc_interceptors/PageInterceptor/preHandle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)#java/util/List/get(int)
app/util/mvc_interceptors/PageInterceptor/initCurrency()#java/math/BigDecimal/BigDecimal(double)
app/util/mvc_interceptors/PageInterceptor/initCurrency()#java/text/DecimalFormat/DecimalFormat(java.lang.String)
app/util/mvc_interceptors/PageInterceptor/initCurrency()#java/math/BigDecimal/setScale(int,int)
app/util/mvc_interceptors/PageInterceptor/initCurrency()#java/math/BigDecimal/doubleValue()
app/util/mvc_interceptors/PageInterceptor/initCurrency()#app/util/currency/CurrencyWorker/getCurrency(java.lang.String)
app/util/mvc_interceptors/PageInterceptor/initCurrency()#java/text/NumberFormat/format(double)
app/db/models/Category/hashCode()#java/lang/String/hashCode()
app/db/models/Category/equals(java.lang.Object)#java/lang/String/equals(java.lang.Object)
app/db/models/Category/equals(java.lang.Object)#java/lang/Object/getClass()
app/db/models/Contact/hashCode()#java/lang/String/hashCode()
app/db/models/Contact/equals(java.lang.Object)#java/lang/String/equals(java.lang.Object)
app/db/models/Contact/equals(java.lang.Object)#java/lang/Object/getClass()
